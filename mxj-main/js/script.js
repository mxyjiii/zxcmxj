console.log("‚úÖ script.js –ø–æ–¥–∫–ª—é—á–µ–Ω!");
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function addEvent(element, event, handler) {
    if (element) {
        element.addEventListener(event, handler);
    } else {
        console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${event}`);
    }
}

// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener("DOMContentLoaded", () => {
    const loginButton = document.querySelector(".header__auth-button");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    if (loginButton) {
        addEvent(loginButton, "click", () => {
            console.log("üîë –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏'");
            alert("–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!");
        });
    } else {
        console.warn("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    const productTitles = Array.from(document.querySelectorAll(".product__title")).map(title => title.textContent);

    // –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫
    const titleListContainer = document.querySelector(".title-list");
    if (titleListContainer) {
        productTitles.forEach(title => {
            const listItem = document.createElement("li");
            listItem.textContent = title;
            titleListContainer.appendChild(listItem);
        });
        console.log("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫!");
    } else {
        console.warn("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π —Ñ–æ—Ä–º—ã
    const modal = document.querySelector(".modal");
    const openModalButton = document.querySelector(".open-modal");
    const closeModalButton = document.querySelector(".modal__close");

    if (modal && openModalButton && closeModalButton) {
        addEvent(openModalButton, "click", () => {
            modal.classList.add("active");
            console.log("üìå –û—Ç–∫—Ä—ã—Ç–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è —Ñ–æ—Ä–º–∞");
        });

        addEvent(closeModalButton, "click", () => {
            modal.classList.remove("active");
            console.log("üìå –ó–∞–∫—Ä—ã—Ç–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è —Ñ–æ—Ä–º–∞");
        });

        addEvent(window, "click", (event) => {
            if (event.target === modal) {
                modal.classList.remove("active");
                console.log("üìå –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞");
            }
        });
    } else {
        console.warn("‚ö†Ô∏è –í—Å–ø–ª—ã–≤–∞—é—â–∞—è —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–≤–µ—Ä—Ö'");

        const scrollToTopButton = document.createElement("button");
        scrollToTopButton.textContent = "‚¨Ü –ù–∞–≤–µ—Ä—Ö";
        scrollToTopButton.classList.add("scroll-to-top");
        document.body.appendChild(scrollToTopButton);

        addEvent(scrollToTopButton, "click", () => {
            window.scrollTo({ top: 0, behavior: "smooth" });
            console.log("üìå –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
        });

        window.addEventListener("scroll", () => {
            if (window.scrollY > 300) {
                scrollToTopButton.classList.add("visible");
            } else {
                scrollToTopButton.classList.remove("visible");
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ "–ù–æ–≤–∏–Ω–∫–∏"
const productsSection = document.querySelector(".products");

function checkVisibility() {
    if (!productsSection) {
        console.error("‚ùå –°–µ–∫—Ü–∏—è .products –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    const sectionRect = productsSection.getBoundingClientRect();
    const windowHeight = window.innerHeight;

    if (sectionRect.top < windowHeight * 0.9) {
        console.log("‚úÖ –°–µ–∫—Ü–∏—è '–ù–æ–≤–∏–Ω–∫–∏' —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π!");
        productsSection.classList.add("visible", "fade-in");
        window.removeEventListener("scroll", checkVisibility);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
addEvent(window, "scroll", checkVisibility);
console.log("üìå –°–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
const productsData = [
    {
      id: 1,
      image: "images/kisspng-cider-doughnut-donuts-frosting-icing-muffin-5b47f4ceec1ab7.3977501415314423829671.png",
      title: "–ü–æ–Ω—á–∏–∫ ¬´–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ä–∞–π¬ª",
      description: "–ü–æ–Ω—á–∏–∫–∏ —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ –º–∞–Ω–≥–æ –∏ –º–∞—Ä–∞–∫—É–π–∏, –ø–æ–∫—Ä—ã—Ç—ã–µ –∫–æ–∫–æ—Å–æ–≤–æ–π –≥–ª–∞–∑—É—Ä—å—é.",
      taste: "–°–ª–∞–¥–æ—Å—Ç—å —Å –ª–µ–≥–∫–æ–π –∫–∏—Å–ª–∏–Ω–∫–æ–π, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–µ–π –æ—Ç–¥—ã—Ö –Ω–∞ –ø–ª—è–∂–µ."
    },
    {
      id: 2,
      image: "images/pngtree-matcha-green-tea-donut-png-image_9201292.png",
      title: "–ü–æ–Ω—á–∏–∫ ¬´–ú–∞—Ç—á–∞ –∏ –Æ–¥–∑—É¬ª",
      description: "–ü–æ–Ω—á–∏–∫–∏ —Å —è–ø–æ–Ω—Å–∫–∏–º —Ü–∏—Ç—Ä—É—Å–æ–º —é–¥–∑—É –∏ –≥–ª–∞–∑—É—Ä—å—é –∏–∑ –∑–µ–ª–µ–Ω–æ–≥–æ —á–∞—è –º–∞—Ç—á–∞.",
      taste: "–õ–µ–≥–∫–∞—è –≥–æ—Ä—á–∏–Ω–∫–∞ –º–∞—Ç—á–∞ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å —Ü–∏—Ç—Ä—É—Å–æ–≤–æ–π –∫–∏—Å–ª–∏–Ω–∫–æ–π."
    },
    {
      id: 3,
      image: "images/189bc91c45f73abe5f4298d36de52e5c.png",
      title: "–ü–æ–Ω—á–∏–∫ ¬´–°–æ–ª–µ–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å –∏ –±–µ–∫–æ–Ω¬ª",
      description: "–ü–æ–Ω—á–∏–∫–∏ —Å –∫–∞—Ä–∞–º–µ–ª—å–Ω–æ–π –Ω–∞—á–∏–Ω–∫–æ–π –∏ —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –∫—É—Å–æ—á–∫–∞–º–∏ –±–µ–∫–æ–Ω–∞.",
      taste: "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∞–¥–∫–æ–≥–æ –∏ —Å–æ–ª–µ–Ω–æ–≥–æ."
    }
  ];
  const productsList = document.querySelector('.products__list');

  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
  productsList.innerHTML = '';
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
  for (const key in productsData) {
    const product = productsData[key];
    const productCard = `
      <div class="product-card" data-id="${product.id}">
        <img class="product-card__image" src="${product.image}" alt="${product.title}">
        <h3 class="product-card__title">${product.title}</h3>
        <p class="product-card__description">${product.description}</p>
        <p class="product-card__taste"><strong>–í–∫—É—Å:</strong> ${product.taste}</p>
      </div>
    `;
    productsList.insertAdjacentHTML('beforeend', productCard);
  }
// –ü—Ä–µ–ª–æ–∞–¥–µ—Ä
document.addEventListener('DOMContentLoaded', function() {
    const preloader = document.querySelector('.preloader');
    const mainContent = document.querySelector('.main');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
    preloader.style.display = 'flex';
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
    setTimeout(function() {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
      fetch('data.json')
        .then(response => response.json())
        .then(data => {
          renderProducts(data.products);
          preloader.style.opacity = '0';
          
          setTimeout(() => {
            preloader.style.display = 'none';
            mainContent.style.display = 'block';
          }, 500);
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
          preloader.style.display = 'none';
          mainContent.style.display = 'block';
        });
    }, 3000);
  });
  
  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
  function renderProducts(products) {
    const productsList = document.querySelector('.products__list');
    
    if (!productsList) return;
    
    productsList.innerHTML = '';
    
    products.forEach(product => {
      const productCard = `
        <div class="product-card" data-id="${product.id}">
          <img class="product-card__image" src="${product.image}" alt="${product.title}" loading="lazy">
          <h3 class="product-card__title">${product.title}</h3>
          <p class="product-card__description">${product.description}</p>
          <p class="product-card__taste"><strong>–í–∫—É—Å:</strong> ${product.taste}</p>
        </div>
      `;
      productsList.insertAdjacentHTML('beforeend', productCard);
    });
  }
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.querySelector('.products__list');
    const cards = Array.from(document.querySelectorAll('.product-card'));
    const prevBtn = document.querySelector('.carousel__button--prev');
    const nextBtn = document.querySelector('.carousel__button--next');
    const dotsContainer = document.querySelector('.carousel__dots');
    
    let currentIndex = 0;
    let isAnimating = false;
    const animationDuration = 600; // –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å CSS transition
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    cards.forEach((_, index) => {
      const dot = document.createElement('span');
      dot.classList.add('carousel__dot');
      if (index === 0) dot.classList.add('active');
      dot.addEventListener('click', () => {
        if (!isAnimating && index !== currentIndex) {
          goToSlide(index);
        }
      });
      dotsContainer.appendChild(dot);
    });
    const dots = document.querySelectorAll('.carousel__dot');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    updateCarousel();
    
    function updateCarousel() {
      cards.forEach((card, index) => {
        card.classList.remove('active', 'prev', 'next');
        
        if (index === currentIndex) {
          card.classList.add('active');
        } else if (index === (currentIndex - 1 + cards.length) % cards.length) {
          card.classList.add('prev');
        } else if (index === (currentIndex + 1) % cards.length) {
          card.classList.add('next');
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentIndex);
      });
    }
    
    function goToSlide(index) {
      if (isAnimating) return;
      
      isAnimating = true;
      currentIndex = (index + cards.length) % cards.length;
      updateCarousel();
      
      setTimeout(() => {
        isAnimating = false;
      }, animationDuration);
    }
    
    prevBtn.addEventListener('click', () => {
      if (!isAnimating) {
        goToSlide(currentIndex - 1);
      }
    });
    
    nextBtn.addEventListener('click', () => {
      if (!isAnimating) {
        goToSlide(currentIndex + 1);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–≤–∞–π–ø–æ–≤
    let touchStartX = 0;
    let touchEndX = 0;
    
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, {passive: true});
    
    carousel.addEventListener('touchend', (e) => {
      if (isAnimating) return;
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, {passive: true});
    
    function handleSwipe() {
      const threshold = 50;
      if (touchEndX < touchStartX - threshold) {
        goToSlide(currentIndex + 1);
      } else if (touchEndX > touchStartX + threshold) {
        goToSlide(currentIndex - 1);
      }
    }
    
    // –ö–ª–∏–∫ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    cards.forEach((card, index) => {
      card.addEventListener('click', (e) => {
        if (!card.classList.contains('active') && !isAnimating) {
          const direction = index > currentIndex ? 1 : -1;
          goToSlide(currentIndex + direction);
        }
      });
    });
  });